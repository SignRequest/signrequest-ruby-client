=begin
#SignRequest API

#API for SignRequest.com

OpenAPI spec version: v1
Contact: tech-support@signrequest.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SignRequestClient
  class EventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :document__uuid 
    # @option opts [String] :document__external_id 
    # @option opts [String] :document__signrequest__who 
    # @option opts [String] :document__signrequest__from_email 
    # @option opts [String] :document__status 
    # @option opts [String] :document__user__email 
    # @option opts [String] :document__user__first_name 
    # @option opts [String] :document__user__last_name 
    # @option opts [String] :delivered 
    # @option opts [String] :delivered_on 
    # @option opts [String] :timestamp 
    # @option opts [String] :status 
    # @option opts [String] :event_type 
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :limit Number of results to return per page.
    # @return [InlineResponse2004]
    def events_list(opts = {})
      data, _status_code, _headers = events_list_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :document__uuid 
    # @option opts [String] :document__external_id 
    # @option opts [String] :document__signrequest__who 
    # @option opts [String] :document__signrequest__from_email 
    # @option opts [String] :document__status 
    # @option opts [String] :document__user__email 
    # @option opts [String] :document__user__first_name 
    # @option opts [String] :document__user__last_name 
    # @option opts [String] :delivered 
    # @option opts [String] :delivered_on 
    # @option opts [String] :timestamp 
    # @option opts [String] :status 
    # @option opts [String] :event_type 
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :limit Number of results to return per page.
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def events_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.events_list ..."
      end
      # resource path
      local_var_path = "/events/"

      # query parameters
      query_params = {}
      query_params[:'document__uuid'] = opts[:'document__uuid'] if !opts[:'document__uuid'].nil?
      query_params[:'document__external_id'] = opts[:'document__external_id'] if !opts[:'document__external_id'].nil?
      query_params[:'document__signrequest__who'] = opts[:'document__signrequest__who'] if !opts[:'document__signrequest__who'].nil?
      query_params[:'document__signrequest__from_email'] = opts[:'document__signrequest__from_email'] if !opts[:'document__signrequest__from_email'].nil?
      query_params[:'document__status'] = opts[:'document__status'] if !opts[:'document__status'].nil?
      query_params[:'document__user__email'] = opts[:'document__user__email'] if !opts[:'document__user__email'].nil?
      query_params[:'document__user__first_name'] = opts[:'document__user__first_name'] if !opts[:'document__user__first_name'].nil?
      query_params[:'document__user__last_name'] = opts[:'document__user__last_name'] if !opts[:'document__user__last_name'].nil?
      query_params[:'delivered'] = opts[:'delivered'] if !opts[:'delivered'].nil?
      query_params[:'delivered_on'] = opts[:'delivered_on'] if !opts[:'delivered_on'].nil?
      query_params[:'timestamp'] = opts[:'timestamp'] if !opts[:'timestamp'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'event_type'] = opts[:'event_type'] if !opts[:'event_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param id A unique integer value identifying this event.
    # @param [Hash] opts the optional parameters
    # @return [Event]
    def events_read(id, opts = {})
      data, _status_code, _headers = events_read_with_http_info(id, opts)
      return data
    end

    # 
    # 
    # @param id A unique integer value identifying this event.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Event, Fixnum, Hash)>] Event data, response status code and response headers
    def events_read_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.events_read ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.events_read"
      end
      # resource path
      local_var_path = "/events/{id}/".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Event')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
