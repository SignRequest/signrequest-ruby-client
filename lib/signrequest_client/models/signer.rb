=begin
#SignRequest API

#API for SignRequest.com

OpenAPI spec version: v1
Contact: tech-support@signrequest.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SignRequestClient
  class Signer
    attr_accessor :email

    attr_accessor :display_name

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :email_viewed

    attr_accessor :viewed

    attr_accessor :signed

    attr_accessor :downloaded

    attr_accessor :signed_on

    attr_accessor :needs_to_sign

    attr_accessor :approve_only

    attr_accessor :notify_only

    attr_accessor :in_person

    attr_accessor :order

    attr_accessor :language

    attr_accessor :force_language

    attr_accessor :emailed

    attr_accessor :verify_phone_number

    attr_accessor :verify_bank_account

    attr_accessor :declined

    attr_accessor :declined_on

    attr_accessor :forwarded

    attr_accessor :forwarded_on

    attr_accessor :forwarded_to_email

    attr_accessor :forwarded_reason

    attr_accessor :message

    attr_accessor :embed_url_user_id

    attr_accessor :inputs

    # Place an approval stamp on a document when a signer approves a document
    attr_accessor :use_stamp_for_approve_only

    attr_accessor :embed_url

    attr_accessor :attachments

    attr_accessor :redirect_url

    attr_accessor :redirect_url_declined

    attr_accessor :after_document

    attr_accessor :integrations

    # Require the signer to enter this password before signing a document. This field is write only.
    attr_accessor :password

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'email' => :'email',
        :'display_name' => :'display_name',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'email_viewed' => :'email_viewed',
        :'viewed' => :'viewed',
        :'signed' => :'signed',
        :'downloaded' => :'downloaded',
        :'signed_on' => :'signed_on',
        :'needs_to_sign' => :'needs_to_sign',
        :'approve_only' => :'approve_only',
        :'notify_only' => :'notify_only',
        :'in_person' => :'in_person',
        :'order' => :'order',
        :'language' => :'language',
        :'force_language' => :'force_language',
        :'emailed' => :'emailed',
        :'verify_phone_number' => :'verify_phone_number',
        :'verify_bank_account' => :'verify_bank_account',
        :'declined' => :'declined',
        :'declined_on' => :'declined_on',
        :'forwarded' => :'forwarded',
        :'forwarded_on' => :'forwarded_on',
        :'forwarded_to_email' => :'forwarded_to_email',
        :'forwarded_reason' => :'forwarded_reason',
        :'message' => :'message',
        :'embed_url_user_id' => :'embed_url_user_id',
        :'inputs' => :'inputs',
        :'use_stamp_for_approve_only' => :'use_stamp_for_approve_only',
        :'embed_url' => :'embed_url',
        :'attachments' => :'attachments',
        :'redirect_url' => :'redirect_url',
        :'redirect_url_declined' => :'redirect_url_declined',
        :'after_document' => :'after_document',
        :'integrations' => :'integrations',
        :'password' => :'password'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'email' => :'String',
        :'display_name' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'email_viewed' => :'BOOLEAN',
        :'viewed' => :'BOOLEAN',
        :'signed' => :'BOOLEAN',
        :'downloaded' => :'BOOLEAN',
        :'signed_on' => :'DateTime',
        :'needs_to_sign' => :'BOOLEAN',
        :'approve_only' => :'BOOLEAN',
        :'notify_only' => :'BOOLEAN',
        :'in_person' => :'BOOLEAN',
        :'order' => :'Integer',
        :'language' => :'String',
        :'force_language' => :'BOOLEAN',
        :'emailed' => :'BOOLEAN',
        :'verify_phone_number' => :'String',
        :'verify_bank_account' => :'String',
        :'declined' => :'BOOLEAN',
        :'declined_on' => :'DateTime',
        :'forwarded' => :'String',
        :'forwarded_on' => :'DateTime',
        :'forwarded_to_email' => :'String',
        :'forwarded_reason' => :'String',
        :'message' => :'String',
        :'embed_url_user_id' => :'String',
        :'inputs' => :'Array<SignerInputs>',
        :'use_stamp_for_approve_only' => :'BOOLEAN',
        :'embed_url' => :'String',
        :'attachments' => :'Array<SignerAttachment>',
        :'redirect_url' => :'String',
        :'redirect_url_declined' => :'String',
        :'after_document' => :'String',
        :'integrations' => :'Array<InlineDocumentSignerIntegrationData>',
        :'password' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.has_key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.has_key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.has_key?(:'email_viewed')
        self.email_viewed = attributes[:'email_viewed']
      end

      if attributes.has_key?(:'viewed')
        self.viewed = attributes[:'viewed']
      end

      if attributes.has_key?(:'signed')
        self.signed = attributes[:'signed']
      end

      if attributes.has_key?(:'downloaded')
        self.downloaded = attributes[:'downloaded']
      end

      if attributes.has_key?(:'signed_on')
        self.signed_on = attributes[:'signed_on']
      end

      if attributes.has_key?(:'needs_to_sign')
        self.needs_to_sign = attributes[:'needs_to_sign']
      else
        self.needs_to_sign = true
      end

      if attributes.has_key?(:'approve_only')
        self.approve_only = attributes[:'approve_only']
      end

      if attributes.has_key?(:'notify_only')
        self.notify_only = attributes[:'notify_only']
      end

      if attributes.has_key?(:'in_person')
        self.in_person = attributes[:'in_person']
      end

      if attributes.has_key?(:'order')
        self.order = attributes[:'order']
      end

      if attributes.has_key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.has_key?(:'force_language')
        self.force_language = attributes[:'force_language']
      end

      if attributes.has_key?(:'emailed')
        self.emailed = attributes[:'emailed']
      end

      if attributes.has_key?(:'verify_phone_number')
        self.verify_phone_number = attributes[:'verify_phone_number']
      end

      if attributes.has_key?(:'verify_bank_account')
        self.verify_bank_account = attributes[:'verify_bank_account']
      end

      if attributes.has_key?(:'declined')
        self.declined = attributes[:'declined']
      end

      if attributes.has_key?(:'declined_on')
        self.declined_on = attributes[:'declined_on']
      end

      if attributes.has_key?(:'forwarded')
        self.forwarded = attributes[:'forwarded']
      end

      if attributes.has_key?(:'forwarded_on')
        self.forwarded_on = attributes[:'forwarded_on']
      end

      if attributes.has_key?(:'forwarded_to_email')
        self.forwarded_to_email = attributes[:'forwarded_to_email']
      end

      if attributes.has_key?(:'forwarded_reason')
        self.forwarded_reason = attributes[:'forwarded_reason']
      end

      if attributes.has_key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.has_key?(:'embed_url_user_id')
        self.embed_url_user_id = attributes[:'embed_url_user_id']
      end

      if attributes.has_key?(:'inputs')
        if (value = attributes[:'inputs']).is_a?(Array)
          self.inputs = value
        end
      end

      if attributes.has_key?(:'use_stamp_for_approve_only')
        self.use_stamp_for_approve_only = attributes[:'use_stamp_for_approve_only']
      end

      if attributes.has_key?(:'embed_url')
        self.embed_url = attributes[:'embed_url']
      end

      if attributes.has_key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end

      if attributes.has_key?(:'redirect_url')
        self.redirect_url = attributes[:'redirect_url']
      end

      if attributes.has_key?(:'redirect_url_declined')
        self.redirect_url_declined = attributes[:'redirect_url_declined']
      end

      if attributes.has_key?(:'after_document')
        self.after_document = attributes[:'after_document']
      end

      if attributes.has_key?(:'integrations')
        if (value = attributes[:'integrations']).is_a?(Array)
          self.integrations = value
        end
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @email.to_s.length > 255
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 255.')
      end

      if @email.to_s.length < 1
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 1.')
      end

      if !@display_name.nil? && @display_name.to_s.length < 1
        invalid_properties.push('invalid value for "display_name", the character length must be great than or equal to 1.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 255
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 255.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 255
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 255.')
      end

      if !@order.nil? && @order > 2147483647
        invalid_properties.push('invalid value for "order", must be smaller than or equal to 2147483647.')
      end

      if !@order.nil? && @order < 0
        invalid_properties.push('invalid value for "order", must be greater than or equal to 0.')
      end

      if !@verify_phone_number.nil? && @verify_phone_number.to_s.length > 255
        invalid_properties.push('invalid value for "verify_phone_number", the character length must be smaller than or equal to 255.')
      end

      if !@verify_bank_account.nil? && @verify_bank_account.to_s.length > 255
        invalid_properties.push('invalid value for "verify_bank_account", the character length must be smaller than or equal to 255.')
      end

      if !@forwarded_to_email.nil? && @forwarded_to_email.to_s.length < 1
        invalid_properties.push('invalid value for "forwarded_to_email", the character length must be great than or equal to 1.')
      end

      if !@forwarded_reason.nil? && @forwarded_reason.to_s.length < 1
        invalid_properties.push('invalid value for "forwarded_reason", the character length must be great than or equal to 1.')
      end

      if !@message.nil? && @message.to_s.length < 1
        invalid_properties.push('invalid value for "message", the character length must be great than or equal to 1.')
      end

      if !@embed_url_user_id.nil? && @embed_url_user_id.to_s.length > 255
        invalid_properties.push('invalid value for "embed_url_user_id", the character length must be smaller than or equal to 255.')
      end

      if !@embed_url.nil? && @embed_url.to_s.length < 1
        invalid_properties.push('invalid value for "embed_url", the character length must be great than or equal to 1.')
      end

      if !@redirect_url.nil? && @redirect_url.to_s.length > 2100
        invalid_properties.push('invalid value for "redirect_url", the character length must be smaller than or equal to 2100.')
      end

      if !@redirect_url_declined.nil? && @redirect_url_declined.to_s.length > 2100
        invalid_properties.push('invalid value for "redirect_url_declined", the character length must be smaller than or equal to 2100.')
      end

      if !@password.nil? && @password.to_s.length < 1
        invalid_properties.push('invalid value for "password", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @email.nil?
      return false if @email.to_s.length > 255
      return false if @email.to_s.length < 1
      return false if !@display_name.nil? && @display_name.to_s.length < 1
      return false if !@first_name.nil? && @first_name.to_s.length > 255
      return false if !@last_name.nil? && @last_name.to_s.length > 255
      return false if !@order.nil? && @order > 2147483647
      return false if !@order.nil? && @order < 0
      language_validator = EnumAttributeValidator.new('String', ['en', 'en-gb', 'nl', 'fr', 'de', 'he', 'da', 'fi', 'hu', 'it', 'no', 'pl', 'pt', 'es', 'sv', 'ru'])
      return false unless language_validator.valid?(@language)
      return false if !@verify_phone_number.nil? && @verify_phone_number.to_s.length > 255
      return false if !@verify_bank_account.nil? && @verify_bank_account.to_s.length > 255
      return false if !@forwarded_to_email.nil? && @forwarded_to_email.to_s.length < 1
      return false if !@forwarded_reason.nil? && @forwarded_reason.to_s.length < 1
      return false if !@message.nil? && @message.to_s.length < 1
      return false if !@embed_url_user_id.nil? && @embed_url_user_id.to_s.length > 255
      return false if !@embed_url.nil? && @embed_url.to_s.length < 1
      return false if !@redirect_url.nil? && @redirect_url.to_s.length > 2100
      return false if !@redirect_url_declined.nil? && @redirect_url_declined.to_s.length > 2100
      return false if !@password.nil? && @password.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      if email.to_s.length > 255
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 255.'
      end

      if email.to_s.length < 1
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 1.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if !display_name.nil? && display_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "display_name", the character length must be great than or equal to 1.'
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 255.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 255.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] order Value to be assigned
    def order=(order)
      if !order.nil? && order > 2147483647
        fail ArgumentError, 'invalid value for "order", must be smaller than or equal to 2147483647.'
      end

      if !order.nil? && order < 0
        fail ArgumentError, 'invalid value for "order", must be greater than or equal to 0.'
      end

      @order = order
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] language Object to be assigned
    def language=(language)
      validator = EnumAttributeValidator.new('String', ['en', 'en-gb', 'nl', 'fr', 'de', 'he', 'da', 'fi', 'hu', 'it', 'no', 'pl', 'pt', 'es', 'sv', 'ru'])
      unless validator.valid?(language)
        fail ArgumentError, 'invalid value for "language", must be one of #{validator.allowable_values}.'
      end
      @language = language
    end

    # Custom attribute writer method with validation
    # @param [Object] verify_phone_number Value to be assigned
    def verify_phone_number=(verify_phone_number)
      if !verify_phone_number.nil? && verify_phone_number.to_s.length > 255
        fail ArgumentError, 'invalid value for "verify_phone_number", the character length must be smaller than or equal to 255.'
      end

      @verify_phone_number = verify_phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] verify_bank_account Value to be assigned
    def verify_bank_account=(verify_bank_account)
      if !verify_bank_account.nil? && verify_bank_account.to_s.length > 255
        fail ArgumentError, 'invalid value for "verify_bank_account", the character length must be smaller than or equal to 255.'
      end

      @verify_bank_account = verify_bank_account
    end

    # Custom attribute writer method with validation
    # @param [Object] forwarded_to_email Value to be assigned
    def forwarded_to_email=(forwarded_to_email)
      if !forwarded_to_email.nil? && forwarded_to_email.to_s.length < 1
        fail ArgumentError, 'invalid value for "forwarded_to_email", the character length must be great than or equal to 1.'
      end

      @forwarded_to_email = forwarded_to_email
    end

    # Custom attribute writer method with validation
    # @param [Object] forwarded_reason Value to be assigned
    def forwarded_reason=(forwarded_reason)
      if !forwarded_reason.nil? && forwarded_reason.to_s.length < 1
        fail ArgumentError, 'invalid value for "forwarded_reason", the character length must be great than or equal to 1.'
      end

      @forwarded_reason = forwarded_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] message Value to be assigned
    def message=(message)
      if !message.nil? && message.to_s.length < 1
        fail ArgumentError, 'invalid value for "message", the character length must be great than or equal to 1.'
      end

      @message = message
    end

    # Custom attribute writer method with validation
    # @param [Object] embed_url_user_id Value to be assigned
    def embed_url_user_id=(embed_url_user_id)
      if !embed_url_user_id.nil? && embed_url_user_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "embed_url_user_id", the character length must be smaller than or equal to 255.'
      end

      @embed_url_user_id = embed_url_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] embed_url Value to be assigned
    def embed_url=(embed_url)
      if !embed_url.nil? && embed_url.to_s.length < 1
        fail ArgumentError, 'invalid value for "embed_url", the character length must be great than or equal to 1.'
      end

      @embed_url = embed_url
    end

    # Custom attribute writer method with validation
    # @param [Object] redirect_url Value to be assigned
    def redirect_url=(redirect_url)
      if !redirect_url.nil? && redirect_url.to_s.length > 2100
        fail ArgumentError, 'invalid value for "redirect_url", the character length must be smaller than or equal to 2100.'
      end

      @redirect_url = redirect_url
    end

    # Custom attribute writer method with validation
    # @param [Object] redirect_url_declined Value to be assigned
    def redirect_url_declined=(redirect_url_declined)
      if !redirect_url_declined.nil? && redirect_url_declined.to_s.length > 2100
        fail ArgumentError, 'invalid value for "redirect_url_declined", the character length must be smaller than or equal to 2100.'
      end

      @redirect_url_declined = redirect_url_declined
    end

    # Custom attribute writer method with validation
    # @param [Object] password Value to be assigned
    def password=(password)
      if !password.nil? && password.to_s.length < 1
        fail ArgumentError, 'invalid value for "password", the character length must be great than or equal to 1.'
      end

      @password = password
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          email == o.email &&
          display_name == o.display_name &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          email_viewed == o.email_viewed &&
          viewed == o.viewed &&
          signed == o.signed &&
          downloaded == o.downloaded &&
          signed_on == o.signed_on &&
          needs_to_sign == o.needs_to_sign &&
          approve_only == o.approve_only &&
          notify_only == o.notify_only &&
          in_person == o.in_person &&
          order == o.order &&
          language == o.language &&
          force_language == o.force_language &&
          emailed == o.emailed &&
          verify_phone_number == o.verify_phone_number &&
          verify_bank_account == o.verify_bank_account &&
          declined == o.declined &&
          declined_on == o.declined_on &&
          forwarded == o.forwarded &&
          forwarded_on == o.forwarded_on &&
          forwarded_to_email == o.forwarded_to_email &&
          forwarded_reason == o.forwarded_reason &&
          message == o.message &&
          embed_url_user_id == o.embed_url_user_id &&
          inputs == o.inputs &&
          use_stamp_for_approve_only == o.use_stamp_for_approve_only &&
          embed_url == o.embed_url &&
          attachments == o.attachments &&
          redirect_url == o.redirect_url &&
          redirect_url_declined == o.redirect_url_declined &&
          after_document == o.after_document &&
          integrations == o.integrations &&
          password == o.password
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [email, display_name, first_name, last_name, email_viewed, viewed, signed, downloaded, signed_on, needs_to_sign, approve_only, notify_only, in_person, order, language, force_language, emailed, verify_phone_number, verify_bank_account, declined, declined_on, forwarded, forwarded_on, forwarded_to_email, forwarded_reason, message, embed_url_user_id, inputs, use_stamp_for_approve_only, embed_url, attachments, redirect_url, redirect_url_declined, after_document, integrations, password].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SignRequestClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
